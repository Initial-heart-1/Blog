<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>《明日方舟》机器人（其实是 QQBot 框架） Amiya-Bot 简明部署教程</title>
    <link href="/2022/cl72v4s0m0002x8u7h1gmgvpf/"/>
    <url>/2022/cl72v4s0m0002x8u7h1gmgvpf/</url>
    
    <content type="html"><![CDATA[<p>  在 CQ 还没凉那会儿笔者就在折腾 QQBot 了，第一次整 Bot 至今得有个七八年了，但是 CQ 凉了之后就没整了，很巧的是那会入坑了方舟（被朋友拖进来的），后来见着了一个能合成游戏内抽卡图的机器人，首先就觉得惊奇，CQ 都凉了机器人是越来越罕见，然后觉得这玩意儿挺好，我得整一个。</p><p>  那会这个机器人，也就是 Amiya-Bot，才刚 v3，笔者尝试部署，然后就被文档整懵了，遂放弃。</p><p>  真正的第一次成功部署在 v4，那时数据库改成了 sqlite，免配置。</p><p>  现在这个项目的最新稳定版本是 v5，截至截稿之时 v6 发布了第二个 Alpha 版本。</p><p>  废话说得太多了，现在开始讲如何部署。</p><p>  在开始之前，需要说明的是，笔者因为自己就被文档坑过，所以为该项目完善了一些文档，下面可能会大量引用（当然，引用的文档不一定是笔者编写的），直接放上相关链接来看，本文只重点讲解文档没有涉及到的部分，比如 mirai 的部署和配置。引用的文档与本文采用相同方式许可。</p><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>  作者在 Windows 环境下部署并编写本文，所以使用 Linux 的用户可能不能照抄，但是思路是一样的，抄个思路一般也没问题，不过要注意你的系统是否符合项目要求，具体系统要求如下：</p><blockquote><ul><li>仅支持 <strong>Windows 7</strong> 以上系统</li><li>仅支持 <strong>MacOS 10.14 Mojave</strong> 以上系统</li><li>Linux 系统仅支持 <strong>Ubuntu 18.04</strong> 以及 <strong>Ubuntu 20.04</strong></li></ul></blockquote><p>  其他的系统部分用户有成功部署的案例，但是显然不完全适用本文，如果你的系统不符合以上要求，你可以参照本文也就是一般部署的思路尝试部署在你的系统，但是可能会遇到一些困难。</p><p>  在开始正式部署前，我们有必要先了解一下项目的基本情况，否则可能会造成一些困扰。</p><p>  Amiya-Bot 是基于 mirai-api-http 的 Python “《明日方舟》机器人“（其实你完全可以把 ta 当一个机器人框架使用）。</p><p>  那么，mirai-api-http是什么？mirai-api-http（下称 MAH 或 mah） 是 mirai-console 的一个插件，原生的 mirai-console 插件使用 kt 或 java 编写，mirai-api-http 通过提供 API 的方式让更多语言可以接入 mirai-console。</p><p>  mirai 的相关介绍，由于其项目 README 有些限制，我不好引用，所以请 <a href="https://github.com/mamoe/mirai">自己去看</a></p><p>  那么基本情况就介绍到这里，接下来开始正式的部署。</p><h3 id="2-部署-mirai"><a href="#2-部署-mirai" class="headerlink" title="2. 部署 mirai"></a>2. 部署 mirai</h3><p>  都说 Amiya-Bot 基于 mirai-api-http 了，那当然先得从”基于“开始做起嘛。就好像盖房子总得先盖地基一样，而 mirai-api-http 又基于 mirai-console （一般用户方便理解可以直接看作 mirai 本体），mirai 就像地基填的混凝土，而 mah 则是钢筋，所以我们先来进行混凝土的制作，也就是 mirai 的部署。</p><p>  部署 mirai 对于一般用户来说就是部署 mirai-console，mirai-console 有个启动器叫做 Mirai Console Loader 简称 MCL（下称可能为 mcl），而 MCL 又有个安装器叫做 MCL Installer（下称 MCLI 或 mcli），所以我们现在先去下载 MCL Installer。</p><p>  打开 <a href="https://github.com/iTXTech/mcl-installer/releases">此页面</a>，找到最新的稳定 Release，下载对应你系统的版本。</p><p>  一般情况下，请下载含有 <code>x86</code> 的版本而不是 <code>arm64</code>。</p><p>  <img src="/img/p2/img.png" alt="Release，截至截稿时最新稳定版本为 1.0.7"></p><p>  下载完之后复制到你准备用来放 mirai 的目录，然后打开它。可能会弹出 UAC 警告，请确定。</p><p>  然后你会看到以下界面：</p><p>  <img src="/img/p2/img_1.png" alt="mcli 的初始界面"></p><p>  通常来说，如果你不是跟 Java 相关的开发者，是不会有如此高的 Java 版本的，最可能出现的是”1.8.0“甚至是没有 Java，那么笔者假设自己是”1.8.0“，并不满足 mirai 推荐的 Java 版本，所以我们输入 <code>Y</code> 并回车（当然如果你安装了版本 ≥11 的 JDK 那么可以选择输入N，但，Java 算不上大，独立隔离不影响系统的最新 Java 谁不爱呢？）。</p><p>  接下来会让你选择一系列选项，不一一放图讲解了，针对每个选项进行说明：</p><p>  Java 版本：推荐是能选到的最高，原因有多方面不展开讲，也许有机会会单独讲。</p><p>  JRE or JDK：推荐 <code>JDK</code>，不解释。</p><p>  Binary Architecture：通常来说，请输入 <code>x64</code> 而不是默认的 <code>x32</code>，这十分重要。</p><p>  然后会开始 Java 的下载，下载完后会出现 MCL 的公告，并有最新的 MCL 版本，询问你是否下载 MCL ，那当然是毫无疑问的选择 <code>Y</code>。</p><p>  <img src="/img/p2/img_2.png" alt="mcli 询问是否下载 MCL，截至截稿时最新版本为 2.1.0"></p><p>  选择好之后，很快会下载完成，按任意键就可以退出 MCLI，这个时候你可以安全的删除 MCLI 主程序。</p><p>  此时你已经成功部署好了 MCL，接下来就是配置了。</p><h3 id="3-配置-MCL"><a href="#3-配置-MCL" class="headerlink" title="3. 配置 MCL"></a>3. 配置 MCL</h3><p>  首先，我们要弄清楚如果你正确安装了 MCL，安装文件夹的目录结构是怎样的。</p><p>  在没有第一次运行 mcl 执行初始化时，安装目录结构如下：</p>  <figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dos">注：已删除 mcli<br>  <br>├─ LICENSE  <br>├─ README.<span class="hljs-built_in">md</span>  <br>├─ java  <br>├─ mcl  <br>├─ mcl.<span class="hljs-built_in">cmd</span>  <br>└─ mcl.jar<br></code></pre></td></tr></table></figure><p>  现在我们要执行一次 mcl 以初始化，双击打开 <code>mcl.cmd</code>，你将看到以下界面：</p><p>  <img src="/img/p2/img_3.png" alt="mcl 自动下载最新的基础组件"></p><p>  在第一次启动 mcl 时，mcl 会自动下载最新的必要库或插件，列表如下：</p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">net<span class="hljs-selector-class">.mamoe</span>:mirai-console<br>net<span class="hljs-selector-class">.mamoe</span>:mirai-console-terminal<br>net<span class="hljs-selector-class">.mamoe</span>:mirai-core-<span class="hljs-attribute">all</span><br>org<span class="hljs-selector-class">.itxtech</span>:mcl-addon<br></code></pre></td></tr></table></figure><p>  当完成初始化（mcl 启动成功）时，mcl 会输出消息 <code>mirai-console started successfully.</code>。当你看到这条消息时，你就可以把 mcl 的窗口关上了。</p><p>  完成初始化后，安装目录结构如下：</p>  <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">├─ LICENSE<br>├─ README.md<br>├─ <span class="hljs-built_in">config</span><br>├─ <span class="hljs-built_in">config</span>.<span class="hljs-keyword">json</span><br><span class="hljs-keyword"></span>├─ data<br>├─ <span class="hljs-keyword">java</span><br><span class="hljs-keyword"></span>├─ libs<br>├─ logs<br>├─ mcl<br>├─ mcl.cmd<br>├─ mcl.<span class="hljs-keyword">jar</span><br><span class="hljs-keyword"></span>├─ plugin-libraries<br>├─ plugin-<span class="hljs-keyword">shared-libraries</span><br><span class="hljs-keyword"></span>└─ plugins<br></code></pre></td></tr></table></figure><p>  进入 <code>config\Console</code> 目录，打开 <code>AutoLogin.yml</code>，根据注释配置账号密码。</p><p>  请注意密码应填在 <code>value</code> 项而非 <code>kind</code>，参数名称后的冒号后有一个空格。</p><p>  假设我的账号是 <code>10001</code>，我的密码是 <code>mhtnbdhouse</code>，那么我应该这样填写配置：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">accounts:</span> <br><span class="hljs-bullet">-</span> <span class="hljs-comment"># 账号, 现只支持 QQ 数字账号</span><br>  <span class="hljs-attr">account:</span> <span class="hljs-number">10001</span><br>  <span class="hljs-attr">password:</span> <br>    <span class="hljs-comment"># 密码种类, 可选 PLAIN 或 MD5</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">PLAIN</span><br>    <span class="hljs-comment"># 密码内容, PLAIN 时为密码文本, MD5 时为 16 进制</span><br>    <span class="hljs-attr">value:</span> <span class="hljs-string">mhtnbdhouse</span><br>  <span class="hljs-comment"># 账号配置. 可用配置列表 (注意大小写):</span><br>  <span class="hljs-comment"># &quot;protocol&quot;: &quot;ANDROID_PHONE&quot; / &quot;ANDROID_PAD&quot; / &quot;ANDROID_WATCH&quot; / &quot;MACOS&quot; / &quot;IPAD&quot;</span><br>  <span class="hljs-comment"># &quot;device&quot;: &quot;device.json&quot;</span><br>  <span class="hljs-comment"># &quot;enable&quot;: true</span><br>  <span class="hljs-comment"># &quot;heartbeatStrategy&quot;: &quot;STAT_HB&quot; / &quot;REGISTER&quot; / &quot;NONE&quot;</span><br>  <span class="hljs-attr">configuration:</span> <br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">ANDROID_PHONE</span><br>    <span class="hljs-attr">device:</span> <span class="hljs-string">device.json</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">heartbeatStrategy:</span> <span class="hljs-string">STAT_HB</span><br></code></pre></td></tr></table></figure><p>  配置好之后保存退出。</p><p>  接下来再次打开 mcl，在一段时间的加载后会弹出这样的一个窗口：</p><p>  <img src="/img/p2/img_4.png" alt="mirai 的验证码弹窗 图片由用户友情提供"></p><p>  写得很清楚，”需要滑动验证码“，那么应该怎么获得 mirai 需要的 ticket 呢？</p><p>  既然你是冲着这个教程来的，当然是介绍最简单的方法！点击图中的 <code>Open with TxCaptchaHelper</code> 按钮，会弹出一个新的窗口：</p><p>  <img src="/img/p2/img_5.png" alt="TxCaptchaHelper 请求码弹窗 图片由用户友情提供"></p><p>  你可以在 <a href="https://github.com/mzdluo123/TxCaptchaHelper/releases">这里</a> 下载到手机端，1.3 或者 1.2 任选（截稿时的最新版是 1.3，笔者使用 1.2，因为笔者死活上不去 AppCenter）。</p><p>  拿出你的手机，安装上面的手机端，然后打开它，它的界面是这样的：</p><p>  <img src="/img/p2/img_6.png" alt="滑动验证助手界面 图片由用户友情提供"></p><p>  输入上面要求要输的请求码，点下一步，会跳转验证码界面，完成之后会自动上传到服务器，服务器将 ticket 下发到你的机器，验证就通过了！十分地简单！</p><p>  接下来你大概会疑惑：怎么又弹了个窗？</p><p>  这次可不是验证码，这次是设备锁：</p><p>  【这里还缺一张图笔者醒来再补】</p><p>  想通过设备锁有很多种方法，但都有一个前提要求：手机与电脑在同一网络环境下（出口 IP 最好相同），而如果你的机器不在你身边，还有替代方法可以让你和机器”统一出口 IP“，但是我不能也不敢展开讲，懂得都懂。</p><p>  简单口述两种最简单的方法：</p><p>  ①将链接直接复制进浏览器打开，拿出手机登录账号扫码验证。</p><p>  ②将链接发送至手机，在 QQ 中打开此链接（登录此账号）进行验证。（你可以用将链接发给你自己等方式在 QQ 中打开链接）</p><p>  那么，在通过设备锁之后， MCL 的配置就完成了，接下来要安装 MAH 了。</p><h3 id="4-安装-mirai-api-http"><a href="#4-安装-mirai-api-http" class="headerlink" title="4. 安装 mirai-api-http"></a>4. 安装 mirai-api-http</h3><p>  安装 mirai-api-http 有两种方式，一种是使用 MCL 安装，另一种是手动安装，笔者使用的是手动安装，因为手动安装通常会更稳定，不会被 MCL 更新，毕竟生产环境求稳为上。</p><h4 id="I-使用-MCL-安装"><a href="#I-使用-MCL-安装" class="headerlink" title="I. 使用 MCL 安装"></a>I. 使用 MCL 安装</h4><p>  这十分的简单。</p><p>  Win + R 输入 cmd 回车打开命令提示符，切换到 MCL 安装目录，输入：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mcl --update-package net.mamoe:mirai-api-http --channel stable-v2 --type plugin<br>mcl -u<br></code></pre></td></tr></table></figure><p>  即可安装 MAH 的最新版本。</p><p>  如果你不会切换目录，你可以在安装目录下新建一个 <code>mah.txt</code>，填入上面的命令后保存，将 <code>mah.txt</code> 改为 <code>mah.bat</code>，警告选是，然后双击运行它即可。</p><blockquote><p>没有发现 .txt？那意味着你没有开启已知文件的后缀显示，请百度”Windows 开启后缀显示“。</p></blockquote><p>  当出现消息 <code>mirai-console started successfully.</code> 时，你可以在 mcl 中输入 <code>exit</code> 或者 <code>stop</code> 来安全退出，一般推荐以此种方式关闭 mcl。</p><h4 id="II-手动安装"><a href="#II-手动安装" class="headerlink" title="II. 手动安装"></a>II. 手动安装</h4><p>  这稍微麻烦一些，但并不难，如果你无法使用第一种方式或者不想用等种种原因，你可以使用手动安装。</p><p>  首先，打开 mah 的 <a href="https://github.com/project-mirai/mirai-api-http/releases">Release</a>，下载最新的稳定版本，相关操作与上面 MCLI 类似，不再赘述。</p><p>  就像 Minecraft 安装 Mod 一样，Mirai 安装插件也只需要将 jar 文件拖入 <code>plugins</code> 文件夹即可，然后请按初始化 MCL 的方式操作一遍来生成配置。</p><p>  无论你选择哪一种方法安装，安装并初始化 MAH 完成后，接着的当然是配置它。</p><h3 id="5-配置-mirai-api-http"><a href="#5-配置-mirai-api-http" class="headerlink" title="5. 配置 mirai-api-http"></a>5. 配置 mirai-api-http</h3><p>  就像之前配置过的 <code>Autologin.yml</code> 一样，配置 MAH 也有一些不变的基本原则，也就是 yaml 的格式。</p><p>  记住，<strong>参数冒号后边一定要加一个空格！！！</strong></p><p>  这是易错项，总是有用户报这个错自己查了好久最后发现少了个空格。</p><p>  作为一般用户，你不需要知道 MAH 中的全部配置项意思，实际上对一般用户而言，唯一需要变动的可能就是 <code>verifyKey</code>，可以简单理解为密码。</p><p>  直接粘贴下面的配置，并改动 <code>verifyKey</code> 即可。</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">## 启用的 adapter, 内置有 http, ws, reverse-ws, webhook</span><br><span class="hljs-attr">adapters:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">http</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ws</span><br><br><span class="hljs-comment">## 是否开启认证流程, 若为 true 则建立连接时需要验证 verifyKey</span><br><span class="hljs-comment">## 建议公网连接时开启</span><br><span class="hljs-attr">enableVerify:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">verifyKey:</span> <span class="hljs-number">1234567890</span><br><br><span class="hljs-comment">## 开启一些调式信息</span><br><span class="hljs-attr">debug:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment">## 是否开启单 session 模式, 若为 true，则自动创建 session 绑定 console 中登录的 bot</span><br><span class="hljs-comment">## 开启后，接口中任何 sessionKey 不需要传递参数</span><br><span class="hljs-comment">## 若 console 中有多个 bot 登录，则行为未定义</span><br><span class="hljs-comment">## 确保 console 中只有一个 bot 登陆时启用</span><br><span class="hljs-attr">singleMode:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment">## 历史消息的缓存大小</span><br><span class="hljs-comment">## 同时，也是 http adapter 的消息队列容量</span><br><span class="hljs-attr">cacheSize:</span> <span class="hljs-number">4096</span><br><br><span class="hljs-comment">## adapter 的单独配置，键名与 adapters 项配置相同</span><br><span class="hljs-attr">adapterSettings:</span><br>  <span class="hljs-comment">## 详情看 http adapter 使用说明 配置</span><br>  <span class="hljs-attr">http:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">cors:</span> [<span class="hljs-string">&quot;*&quot;</span>]<br>    <span class="hljs-attr">unreadQueueMaxSize:</span> <span class="hljs-number">100</span><br>  <br>  <span class="hljs-comment">## 详情看 websocket adapter 使用说明 配置</span><br>  <span class="hljs-attr">ws:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8060</span><br>    <span class="hljs-attr">reservedSyncId:</span> <span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><h3 id="6-部署-Amiya-Bot"><a href="#6-部署-Amiya-Bot" class="headerlink" title="6. 部署 Amiya-Bot"></a>6. 部署 Amiya-Bot</h3><p>  折腾了这么久，总算是轮到部署 Amiya-Bot 了！但是……Amiya-Bot 有完备的文档，直接查阅 <a href="https://www.amiya.cn/docs/deployByCode.html">项目官网</a> 即可。</p><p>  笔者十分推荐你使用代码部署而不是 exe，因为代码会比打包好的 exe 灵活得多（虽然这会需要你配置 Python 环境）。</p><p>  就这样。</p><p>  本文开头已经说了：</p><blockquote><p>在开始之前，需要说明的是，笔者因为自己就被文档坑过，所以为该项目完善了一些文档，下面可能会大量引用（当然，引用的文档不一定是笔者编写的），直接放上相关链接来看，本文只重点讲解文档没有涉及到的部分，比如 mirai 的部署和配置。</p></blockquote><p>  所以其实这篇文章其实主要是讲的 mirai 和 mah 的搭建和配置。</p><p>  不过还是补充几个要点：</p><ul><li>推荐下载 Python 3.8，务必将其添加进环境变量（安装时勾选 <code>Add PATH</code> 之类的选项）！</li><li>不要忘记还有个 <code>Playwright</code> 需要安装浏览器内核，pip 安装好依赖之后命令行输入：</li></ul>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">playwright install chromium<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows 10/Windows Server 2016+ GPG 签名简明教程</title>
    <link href="/2022/cl72v4s0h0001x8u77r1sbva3/"/>
    <url>/2022/cl72v4s0h0001x8u77r1sbva3/</url>
    
    <content type="html"><![CDATA[<p>  前两天我在服务器上安装完 Git 向 Github 提交 SSH Key 时注意到底下出现了一个叫做 “GPG” 的东西，略微看了一眼描述发现这似乎这是用来验证身份的数字签名，我一下就来了兴趣，开始跟着 Github 的文档折腾这个对我来说还算新鲜的玩意儿。</p><h3 id="1-安装-GPG"><a href="#1-安装-GPG" class="headerlink" title="1. 安装 GPG"></a>1. 安装 GPG</h3><p>  在安装 GPG 之前，显然我们要先搞明白 GPG 大致是个什么玩意儿：  </p><p>  GPG 是 GnuPG 的缩写，GnuPG 是 PGP 在 GPL 下的替代版本。Github 和 Gitee 等代码托管平台通常使用 GPG 为提交和标签签名（至少我看到的如此）。 这可以防止有人冒充你执行提交或者打标签，特别是可以保护标签的安全性。 </p><p>  要安装 GPG，首先当然要下载 GPG 的安装包，在<a href="https://gpg4win.org/download.html">此处</a>可以下载到。  </p><p>  需要注意的是，单击下载页面后，页面会要求你捐赠，选择 “Bank transfer” 后点击 “Download” 即可正常下载。当然如果你有能力的话还是建议你支持一下！  </p><p>  <img src="/img/p1/img.png" alt="下载页面"></p><p>  下载完成后打开安装向导，直接一路下一步即可，当然你可以根据你的需要更改安装路径，但无论是否更改，一定要记住它，马上就要用到。中间会弹出一个新的安装向导，也一路下一步即可，安装读完条之后关闭这个向导安装才能继续进行。</p><h3 id="2-GPG-配置"><a href="#2-GPG-配置" class="headerlink" title="2. GPG 配置"></a>2. GPG 配置</h3><p>  安装好 GPG 之后，通常你可以在你的桌面找到一个这样的东西：</p><p>  <img src="/img/p1/img_1.png" alt="Kleopatra 图标"></p><p>  这个叫做 “Kleopatra” 的玩意儿就是 GPG 的 GUI 界面，打开它，你将看到以下内容：</p><p>  <img src="/img/p1/img_2.png" alt="Kleopatra 界面"></p><p>  点击 “新建密钥对”，会弹出以下界面，按你情况填写，邮箱需要填你 Github 的绑定邮箱。</p><p>  <img src="/img/p1/img_3.png" alt="新建密钥对界面"></p><p>  通常情况下，建议你勾选使用密码保护密钥以确保安全。填写完之后单击新建。</p><p>  如果你勾选了使用密码保护密钥，那么在单击新建之后你会看到这样的界面：</p><p>  <img src="/img/p1/img_4.png" alt="新建密钥中"></p><p>  输入你准备用来保护你密钥的密码，输两遍然后确认。</p><p>  稍等一会就可以了，新建完密钥对之后回到主页面如果你看到这样的页面说明你已经建好了密钥：</p><p>  <img src="/img/p1/img_5.png" alt="新建好密钥对的 Kleopatra 界面"></p><p>  那么就该进行下一步了。</p><h3 id="3-将你的密钥告诉-Git"><a href="#3-将你的密钥告诉-Git" class="headerlink" title="3. 将你的密钥告诉 Git"></a>3. 将你的密钥告诉 Git</h3><p>  要让 Git 在提交和新建标签时使用你的密钥签名，当然需要把你的密钥告诉 Git。</p><p>  回到 Kleopatra，找到你新建的密钥，看见 “密钥 ID” 那一行了吗？点击它并按下 Ctrl + C 以复制它。</p><p>  <img src="/img/p1/img_6.png" alt="点它"></p><p>  将它粘贴到任意文本框内，将中间的所有空格删除，比如我的 ID 是 <code>847D 5CE3 630C D762</code>，那么需要处理成 <code>847D5CE3630CD762</code>。</p><p>  随后 Win+R 输入 cmd 回车打开命令提示符，输入：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.signingkey 你刚刚处理过的密钥<br></code></pre></td></tr></table></figure><p>  例如，我刚刚的密钥是 <code>847D5CE3630CD762</code>，那么我输入：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.signingkey 847D5CE3630CD762<br></code></pre></td></tr></table></figure><p>  按照 Github 的文档，配置到这里就结束了，但是其实并没有！在这时我尝试使用 Git 提交，但 Git 唤出 GPG 后 GPG 给了我一个大嘴巴子：</p>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">gpg: skipped <span class="hljs-string">&quot;847D5CE3630CD762&quot;</span>: <span class="hljs-literal">No</span><span class="hljs-built_in"> secret </span>key<br></code></pre></td></tr></table></figure><p>  看报错的意思是不存在这个密钥，这就奇怪了，明明我已经新建好了密钥，密钥 ID 也没有错误，为什么就是不行呢？我研究了很久，最后找到了问题的答案：需要告诉 Git 你安装 GPG 的位置！</p><p>  你还记得你在第一步时留下的安装路径吗？接下来就要用到它，打开安装目录下的 <code>bin</code> 文件夹，找到 GPG 的主程序（通常为 <code>gpg.exe</code>），接着在命令提示符中输入：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global gpg.program &quot;你的 GPG 主程序位置&quot;<br></code></pre></td></tr></table></figure><p>  例如，我的安装路径在 <code>D:\Gnu\GPG\</code>，那么我输入：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global gpg.program &quot;D:\Gnu\GPG\bin\gpg.exe&quot;<br></code></pre></td></tr></table></figure><p>  注意引号不能少！</p><p>  这样如果没有意外的话就可以正常使用你的密钥对你的提交或者标签签名了！</p><p>  在执行这些操作时如果你在创建密钥的时候选择了使用密码保护密钥则必须键入你的密钥密码，如果没有密码则无法使用，所以务必牢记你的密码！</p><p>  但是想要让 Github 认可你的签名，你还要将你的公钥告诉 Github。</p><h3 id="4-将你的密钥告诉-Github"><a href="#4-将你的密钥告诉-Github" class="headerlink" title="4. 将你的密钥告诉 Github"></a>4. 将你的密钥告诉 Github</h3><p>  再次回到 Kleopatra，右键你的密钥选择 “导出”：</p><p>  <img src="/img/p1/img_7.png" alt="右键导出"></p><p>  选择一个方便的路径，比如说桌面，检查文件名是否含有 “public” 字样，然后确定。</p><p>  找到刚刚导出的密钥，使用文本编辑器打开（如果你没法直接打开请把后缀改为 txt），然后暂且放在一边。</p><p>  打开 Github 首页，点击你的头像后选择 “Settings”</p><p>  <img src="/img/p1/img_8.png" alt="Github 头像"></p><p>  打开 Settings 后在左侧找到 “SSH and GPG keys”：</p><p>  <img src="/img/p1/img_9.png" alt="Github Settings"></p><p>  点击 “New GPG keys”：</p><p>  <img src="/img/p1/img_10.png" alt="SSH and GPG keys"></p><p>  随便输入一个标题，把刚刚打开的密钥全部贴进去，然后点击 “Add GPG key”：</p><p> <img src="/img/p1/img_11.png" alt="Add GPG key"></p><p>  这时通常会要求你进行身份验证，输入你的账户密码之后确认。</p><p>  然后就完成了！现在你的提交和标签会显示 “Verified” 字样。</p><p>  <img src="/img/p1/img_12.png" alt="Verified！"></p><p>  如果你想进一步增强安全性，还可以回到刚才的 “SSH and GPG keys” 页面，将底部的 “Flag unsigned commits as unverified” 勾选上，这样未经你签名但是写着你账户信息的提交全部会被标记为 “Unverified”。</p><p>  但是务必注意，这会对你以前的提交产生影响，所以你可以在你的个人资料上做好说明，例如这样：</p><p>  <img src="/img/p1/img_13.png" alt="个人资料说明"></p><p>  Enjoy！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
